{"version":3,"sources":["AppNavbar.js","Home.js","PersonEdit .js","PersonList .js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","href","Component","Home","Container","fluid","Button","CustomerEdit","emptyPerson","name","jobs","age","item","handleChange","handleSubmit","a","match","params","id","fetch","json","person","event","target","value","preventDefault","method","headers","body","JSON","stringify","history","push","title","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","autoComplete","withRouter","PersonList","persons","isLoading","remove","then","response","data","updatedPerson","filter","i","personList","map","style","whiteSpace","ButtonGroup","size","Table","App","path","exact","component","PersonEdit","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74adee57.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class AppNavbar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {isOpen: false};\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <Navbar color=\"dark\" dark expand=\"md\">\r\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle}/>\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n                <Nav className=\"ml-auto\" navbar>\r\n                    <NavItem>\r\n                        <NavLink href=\"https://github.com/RaghadQadah\">GitHub</NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Collapse>\r\n        </Navbar>;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container } from 'reactstrap';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <AppNavbar/>\r\n                <Container fluid>\r\n                    <Button color=\"link\"><Link to=\"/persons\">Manage Person List</Link></Button>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\n\r\nclass CustomerEdit extends Component {\r\n\r\n    emptyPerson = {\r\n        name: '',\r\n        jobs: '',\r\n        age: ''\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            item: this.emptyPerson\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match.params.id !== 'new') {\r\n            const person = await (await fetch(`/person/${this.props.match.params.id}`)).json();\r\n            this.setState({item: person});\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        let item = {...this.state.item};\r\n        item[name] = value;\r\n        this.setState({item});\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {item} = this.state;\r\n\r\n        await fetch('/person', {\r\n            method: (item.id) ? 'PUT' : 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(item),\r\n        });\r\n        this.props.history.push('/persons');\r\n    }\r\n\r\n    render() {\r\n        const {item} = this.state;\r\n        const title = <h2>{item.id ? 'Edit Pesron' : 'Add Person'}</h2>;\r\n\r\n        return <div>\r\n            <AppNavbar/>\r\n            <Container>\r\n                {title}\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup>\r\n                        <Label for=\"name\">Firstname</Label>\r\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\r\n                               onChange={this.handleChange} autoComplete=\"name\"/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"jobs\">jobs</Label>\r\n                        <Input type=\"text\" name=\"jobs\" id=\"jobs\" value={item.jobs || ''}\r\n                               onChange={this.handleChange} autoComplete=\"jobs\"/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"age\">Age</Label>\r\n                        <Input type=\"text\" name=\"age\" id=\"age\" value={item.age || ''}\r\n                               onChange={this.handleChange} autoComplete=\"age\"/>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n                        <Button color=\"secondary\" tag={Link} to=\"/persons\">Cancel</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default withRouter(CustomerEdit);","import React, { Component } from 'react';\r\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass PersonList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {persons: [], isLoading: true};\r\n        this.remove = this.remove.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n\r\n        fetch('persons')\r\n            .then(response => response.json())\r\n            .then(data => this.setState({persons: data, isLoading: false}));\r\n    }\r\n\r\n    async remove(id) {\r\n        await fetch(`/persons/${id}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedPerson = [...this.state.persons].filter(i => i.id !== id);\r\n            this.setState({persons: updatedPerson});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {persons, isLoading} = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading...</p>;\r\n        }\r\n\r\n        const personList = persons.map(person => {\r\n            return <tr key={person.id}>\r\n                <td style={{whiteSpace: 'nowrap'}}>{person.name}</td>\r\n                <td>{person.jobs}</td>\r\n                <td>{person.age}</td>\r\n                <td>\r\n                    <ButtonGroup>\r\n                        <Button size=\"sm\" color=\"grey\" tag={Link} to={\"/persons/\" + person.id}>Edit</Button>\r\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(person.id)}>Delete</Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <AppNavbar/>\r\n                <Container fluid>\r\n                    <div className=\"float-right\">\r\n                        <Button color=\"success\" tag={Link} to=\"/persons/new\">Add Person</Button>\r\n                    </div>\r\n                    <h3>Person List</h3>\r\n                    <Table className=\"mt-4\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th >name</th>\r\n                            <th >job</th>\r\n                            <th >Age</th>\r\n                            <th >Actions</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {personList}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonList;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport PersonEdit from './PersonEdit ';\nimport PersonList from \"./PersonList \";\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n            <div className=\"container\">\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n            <Route path='/persons' exact={true} component={PersonList}/>\n            <Route path='/persons/:id' component={PersonEdit}/>\n          </Switch>\n            </div>\n        </Router>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import reportWebVitals from './reportWebVitals';\n//\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n//\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}